{"version":3,"file":"static/js/609.42a78ded.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const url = \"\";\r\n    if (Object.keys(values).length === 3) {\r\n      axios\r\n        .post(url, {\r\n          ...values,\r\n        })\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"div\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","// ...\r\nimport React, { useRef } from 'react';\r\nimport emailjs from '@emailjs/browser';\r\nimport { Row, Col } from 'antd';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { Slide, Zoom } from 'react-awesome-reveal';\r\nimport { ContactProps, ValidationTypeProps } from './types';\r\nimport { useForm } from '../../common/utils/useForm';\r\nimport validate from '../../common/utils/validationRules';\r\nimport { Button } from '../../common/Button';\r\nimport Block from '../Block';\r\nimport Input from '../../common/Input';\r\nimport TextArea from '../../common/TextArea';\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from './styles';\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  const formRef = useRef(null); // Create a ref for the form\r\n\r\n  const sendEmail = async (e: React.FormEvent) => {\r\n    e.preventDefault(); // Prevent the default form submission\r\n    try {\r\n      const templateParams = {\r\n        from_name: values.name,\r\n        from_email: values.email,\r\n        message: values.message,\r\n      };\r\n\r\n      // Replace 'YOUR_SERVICE_ID' and 'YOUR_TEMPLATE_ID' with your EmailJS service and template IDs\r\n      const response = await emailjs.send(\r\n        'service_koskg15',\r\n        'template_1r979br',\r\n        templateParams,\r\n        'JUp9U_mkWpXuGI1wq' \r\n      );\r\n\r\n      console.log('Email sent:', response);\r\n    } catch (error) {\r\n      console.error('Error sending email:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup >\r\n              <form ref={formRef} autoComplete=\"off\" onSubmit={(e) => sendEmail(e)}>\r\n                <Col span={24}>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Your Name\"\r\n                    value={values.name || ''}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"name\" />\r\n                </Col>\r\n                <Col span={24}>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    placeholder=\"Your Email\"\r\n                    value={values.email || ''}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"email\" />\r\n                </Col>\r\n                <Col span={24}>\r\n                  <TextArea\r\n                    placeholder=\"Your Message\"\r\n                    value={values.message || ''}\r\n                    name=\"message\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <ValidationType type=\"message\" />\r\n                </Col>\r\n                <ButtonContainer>\r\n                  <button value=\"Send\" type=\"submit\">{t('Submit')}</button>\r\n                </ButtonContainer>\r\n              </form>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["useForm","validate","_useState","useState","_useState2","_slicedToArray","values","setValues","_useState3","_useState4","errors","setErrors","_useState5","_useState6","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","_objectSpread","_defineProperty","target","name","value","handleSubmit","preventDefault","axios","then","email","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","_ref4","_ref2","ValidationType","_ref3","type","ErrorMessage","Zoom","direction","erros","formRef","useRef","Row","justify","align","Col","lg","md","sm","xs","Slide","Block","ref","autoComplete","onSubmit","e","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","templateParams","response","wrap","_context","prev","next","from_name","from_email","emailjs","sent","console","log","t0","error","stop","apply","arguments","sendEmail","span","Input","TextArea"],"sourceRoot":""}